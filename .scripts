Installation scripts
(SQL scripts for database creation and test data, build scripts (maven),
deployment and configuration instructions).

DB scripts:

Create the data base:

CREATE DATABASE onlineshop;

Create the tables:

create table USER(
        USER_ID INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
        USERNAME varchar(45) NOT NULL,
        PASSWORD varchar(45) NOT NULL,
        ACTIVE boolean NOT NULL,
        CUSTOMER_ID INT
        );


  CREATE TABLE CART(
        CART_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
        TOTAL_PRICE double
        );


CREATE TABLE BILLING_ADDRESS(
        BILLING_ADDRESS_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
        STREET_NAME varchar(45),
        HOUSE_NUMBER varchar(45),
        CITY varchar(45),
        STATE varchar(45),
        COUNTRY varchar(45),
        ZIP_CODE int
        );




CREATE TABLE CUSTOMER (
    CUSTOMER_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    FIRST_NAME varchar(45) NOT NULL,
    LAST_NAME varchar(45) NOT NULL,
    USERNAME varchar(45) NOT NULL,
    PASSWORD varchar(45) NOT NULL,
    EMAIL varchar(45) NOT NULL,
    ADDRESS varchar(45) NOT NULL,
    HOUSE_NO varchar(45),
    PHONE_NO int,
    BILLING_ADDRESS_ID int,
    ACTIVE BOOLEAN NOT NULL,
    CART_ID int,
    FOREIGN KEY (BILLING_ADDRESS_ID) REFERENCES BILLING_ADDRESS(BILLING_ADDRESS_ID),
    FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID)
    );






CREATE TABLE CUST_PAYMENT_METHOD (
    PAYMENT_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    CUSTOMER_ID int,
    CREDIT_CARD_NO varchar(45),
    CASH_ON_DELIVERY boolean,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
    );


CREATE TABLE ORDER_STATUS_CODE (
    ORDER_STATUS_CODE int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    DESCRIPTION varchar(45)
    );


CREATE TABLE CUSTOMER_ORDER (
     ORDER_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
     CUSTOMER_ID int,
     CART_ID int,
     BILLING_ADDRESS_ID int,
     ORDER_STATUS_CODE int,
     DETAILS varchar(45),
     DATE timestamp,
     FOREIGN KEY (ORDER_STATUS_CODE) REFERENCES ORDER_STATUS_CODE(ORDER_STATUS_CODE),
     FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
     FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
     FOREIGN KEY (BILLING_ADDRESS_ID) REFERENCES BILLING_ADDRESS(BILLING_ADDRESS_ID)
     );


 CREATE TABLE INVOICE_STATUS_CODE (
         INVOICE_STATUS_CODE int PRIMARY KEY NOT NULL AUTO_INCREMENT,
         DESCRIPTION varchar(45)
         );



 CREATE TABLE INVOICE (
    INVOICE_NO int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ORDER_ID int,
    INVOICE_STATUS_CODE int,
    DATE timestamp,
    DETAILS varchar(45),
    FOREIGN KEY (ORDER_ID) REFERENCES CUSTOMER_ORDER(ORDER_ID),
    FOREIGN KEY (INVOICE_STATUS_CODE) REFERENCES INVOICE_STATUS_CODE(INVOICE_STATUS_CODE)
    );



 CREATE TABLE PRODUCT_TYPE (
    PRODUCT_TYPE varchar(45) PRIMARY KEY NOT NULL
    );


  CREATE TABLE ORDER_ITEM_STATUS_CODE (
     ORDER_ITEM_STATUS_CODE int PRIMARY KEY NOT NULL AUTO_INCREMENT,
     DESCRIPTION varchar(45)
     );


  CREATE TABLE PRODUCT (
      PRODUCT_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
      TYPE varchar(45) NOT NULL,
      MAKER varchar(45) NOT NULL,
      NAME varchar(45) NOT NULL,
      COLOR varchar(45),
      SIZE int NOT NULL,
      WEIGHT int NOT NULL,
      PRICE double NOT NULL,
      DESCRIPTION varchar(255)
      );



CREATE TABLE CART_ITEM(
    CART_ITEM_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    CART_ID int,
    PRODUCT_ID int,
    QUANTITY int,
    TOTAL_PRICE double,
    FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
    );




 CREATE TABLE ORDER_ITEM (
        ITEM_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
        PRODUCT_ID int,
        ORDER_ID int,
        ORDER_ITEM_STATUS_CODE int,
        QUANTITY int,
        PRICE double,
        FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
        FOREIGN KEY (ORDER_ID) REFERENCES CUSTOMER_ORDER(ORDER_ID),
        FOREIGN KEY (ORDER_ITEM_STATUS_CODE) REFERENCES ORDER_ITEM_STATUS_CODE(ORDER_ITEM_STATUS_CODE)
        );



CREATE TABLE PAYMENT (
	PAYMENT_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    INVOICE_NO int,
    AMOUNT int,
    DATE TIMESTAMP,
    FOREIGN KEY (INVOICE_NO) REFERENCES INVOICE(INVOICE_NO)
    );


CREATE TABLE SHIPMENT (
	SHIPMENT_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
	ORDER_ID int,
    INVOICE_NO int,
    TRACKING_NO int,
    BILLING_ADDRESS_ID int,
    SHIPMENT_DATE timestamp,
    DETAILS varchar(45),
    FOREIGN KEY (ORDER_ID) REFERENCES CUSTOMER_ORDER(ORDER_ID),
    FOREIGN KEY (INVOICE_NO) REFERENCES INVOICE(INVOICE_NO),
    FOREIGN KEY (BILLING_ADDRESS_ID) REFERENCES BILLING_ADDRESS(BILLING_ADDRESS_ID)
    );



create table AUTHORITY (
          AUTHORITY_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
          USERNAME varchar(45) NOT NULL,
          AUTHORITY varchar(45) NOT NULL
          );




INSERT INTO `onlineshop`.`product_type` (`PRODUCT_TYPE`) VALUES ('TV');
INSERT INTO `onlineshop`.`product_type` (`PRODUCT_TYPE`) VALUES ('SMART PHONE');
INSERT INTO `onlineshop`.`product_type` (`PRODUCT_TYPE`) VALUES ('LAPTOP');
INSERT INTO `onlineshop`.`product_type` (`PRODUCT_TYPE`) VALUES ('PHOTO CAMERA');
INSERT INTO `onlineshop`.`product_type` (`PRODUCT_TYPE`) VALUES ('AUDIO');


INSERT INTO `onlineshop`.`user` (`USERNAME`, `PASSWORD`, `ACTIVE`) VALUES ('admin', 'password', '1');

INSERT INTO `onlineshop`.`authority` (`USERNAME`, `AUTHORITY`) VALUES ('admin', 'ROLE_ADMIN');
